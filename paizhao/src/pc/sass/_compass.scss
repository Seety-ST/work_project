//扩展函数 START
@mixin experimental($property, $value,
  $webkit   : $experimental-support-for-webkit,	
  $moz      : $experimental-support-for-mozilla,  
  $o        : $experimental-support-for-opera,
  $ms       : $experimental-support-for-microsoft,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
  @if $webkit    { -webkit-#{$property} : $value; }
  @if $khtml     {  -khtml-#{$property} : $value; }
  @if $moz       {    -moz-#{$property} : $value; }
  @if $ms        {     -ms-#{$property} : $value; }
  @if $o         {      -o-#{$property} : $value; }
  @if $official  {         #{$property} : $value; }
}

@mixin experimental-value($property, $value,
  $webkit   : $experimental-support-for-webkit,
  $moz      : $experimental-support-for-mozilla,
  $o        : $experimental-support-for-opera,
  $ms       : $experimental-support-for-microsoft,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
  @if $webkit  { #{$property} : -webkit-#{$value}; }
  @if $khtml   { #{$property} :  -khtml-#{$value}; }
  @if $moz     { #{$property} :    -moz-#{$value}; }
  @if $ms      { #{$property} :     -ms-#{$value}; }
  @if $o       { #{$property} :      -o-#{$value}; }
  @if $official  { #{$property} :         #{$value}; }
}
@mixin apply-transform($transform) {
  @include experimental(transform, $transform,
    -moz, -webkit, -o, not(-ms), not(-khtml), official
  );
}

// Apply a transform-origin sent as a complete string.

@mixin apply-origin($origin) {
  @include experimental(transform-origin, $origin,
    -moz, -webkit, -o, not(-ms), not(-khtml), official
  );
}

// transform-origin requires x and y coordinates
//
// * only applies the coordinates if they are there so that it can be called by scale, rotate and skew safely

@mixin transform-origin($originx: 50%, $originy: 50%) {
  @if $originx or $originy {
    @if $originy {
       @include apply-origin($originx or 50% $originy);
     } @else {
       @include apply-origin($originx);
     }
  }
} 
//扩展函数 END

//常用函数 START
@mixin box-sizing($bs) {
  $bs: unquote($bs);
  // 扩展前缀
   @include experimental(box-sizing, $bs,
    '-webkit',false,false,false,false, official
  );
}

@mixin flexbox($properties) {
  @each $prop, $value in $properties {
    @if $prop == display {
      @include experimental-value(display, $value,'-webkit',false,false,false,false, official);
    } @else {
      @include experimental($prop, $value, '-webkit',false,false,false,false, official);
    }
  }
}

@mixin transition(
  $transition-1 : default,
  $transition-2 : false,
  $transition-3 : false,
  $transition-4 : false,
  $transition-5 : false,
  $transition-6 : false,
  $transition-7 : false,
  $transition-8 : false,
  $transition-9 : false,
  $transition-10: false
) {
  @if $transition-1 == default {
    $transition-1 : compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay);
  }
  $transitions: false;
  @if type-of($transition-1) == list and type-of(nth($transition-1,1)) == list {
    $transitions: join($transition-1, compact($transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10), comma);
  } @else {
    $transitions : compact($transition-1, $transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10);
  }
  $delays: comma-list();
  $has-delays: false;
  $webkit-value: comma-list();
  $moz-value: comma-list();
  $o-value: comma-list();

  // This block can be made considerably simpler at the point in time that
  // we no longer need to deal with the differences in how delays are treated.
  @each $transition in $transitions {
    // Extract the values from the list
    // (this would be cleaner if nth took a 3rd argument to provide a default value).
    $property: nth($transition, 1);
    $duration: false;
    $timing-function: false;
    $delay: false;
    @if length($transition) > 1 { $duration:        nth($transition, 2); }
    @if length($transition) > 2 { $timing-function: nth($transition, 3); }
    @if length($transition) > 3 { $delay:           nth($transition, 4); $has-delays: true; }

    // If a delay is provided without a timing function
    @if is-time($timing-function) and not($delay) { $delay: $timing-function; $timing-function: false; $has-delays: true; }

    // Keep a list of delays in case one is specified
    $delays: append($delays, if($delay, $delay, 0s));

    $webkit-value: append($webkit-value, compact(prefixed-for-transition(-webkit, $property) $duration $timing-function));
       $moz-value: append(   $moz-value, compact(prefixed-for-transition(   -moz, $property) $duration $timing-function $delay));
         $o-value: append(     $o-value, compact(prefixed-for-transition(     -o, $property) $duration $timing-function $delay));
  }
  -webkit-transition : $webkit-value;	
  transition : $transitions;
}

@mixin box-shadow(
  $shadow-1 : default,
  $shadow-2 : false,
  $shadow-3 : false,
  $shadow-4 : false,
  $shadow-5 : false,
  $shadow-6 : false,
  $shadow-7 : false,
  $shadow-8 : false,
  $shadow-9 : false,
  $shadow-10: false
) {
  $shadow : compact($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5, $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10);
  @include experimental(box-shadow, $shadow,
    -moz, -webkit, not(-o), not(-ms), not(-khtml), official
  );
}

@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    -moz, -webkit, -o, -ms, not(-khtml), official
  );
}

@mixin transform(
  $scale: 1,
  $rotate: 0deg,
  $transx: 0,
  $transy: 0,
  $skewx: 0deg,
  $skewy: 0deg,
  $originx: false,
  $originy: false
) {
  $transform : scale($scale) rotate($rotate) translate($transx, $transy) skew($skewx, $skewy);
  @include apply-transform($transform);
  @include transform-origin($originx, $originy);
}

@mixin background-clip($clip: $default-background-clip) {
  // webkit and mozilla use the deprecated short [border | padding]
  $clip: unquote($clip);
  $deprecated: $clip;
  @if $clip == padding-box { $deprecated: padding; }
  @if $clip == border-box { $deprecated: border; }
  // Support for webkit and mozilla's use of the deprecated short form
  @include experimental(background-clip, $deprecated,
    -moz,
    -webkit,
    not(-o),
    not(-ms),
    not(-khtml),
    not official
  );
  @include experimental(background-clip, $clip,
    not(-moz),
    not(-webkit),
    not(-o),
    not(-ms),
    -khtml,
    official
  );
}

@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {

  @if $vertical-radius {
    // Webkit doesn't understand the official shorthand syntax for specifying
    // a vertical radius unless so in case there's several we only take the first.
    @include experimental(border-radius, first-value-of($radius) first-value-of($vertical-radius),
      not(-moz),
      -webkit,
      not(-o),
      not(-ms),
      not(-khtml),
      not(official)
    );
    @include experimental("border-radius", $radius unquote("/") $vertical-radius,
      -moz,
      not(-webkit),
      not(-o),
      not(-ms),
      -khtml,
      official
    );
  }
  @else {
    @include experimental(border-radius, $radius,not(-moz),
    not(-webkit),
    not(-o),
    not(-ms),
    -khtml,
    official);
  }
}

@mixin icon-box-class(){
  display: inline-block;
  vertical-align: middle;  
  content: '';
  line-height: 1;
  background-repeat: no-repeat;
}
//常用函数 END