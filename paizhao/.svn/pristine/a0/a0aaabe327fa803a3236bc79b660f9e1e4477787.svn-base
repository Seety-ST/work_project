<?php
/**
* @Desc:     paizhao 商品类 
* @User:     wlq<wulq@yueus.com>
* @Date:     2016年10月8日
* @Time:     上午8:57:48
* @Version:  
*/
class pai_paizhao_goods_class extends POCO_TDG
{
    private $goods_type_config;
    private $goods_style_config;
    private $goods_location_config;
    private $goods_fields_num = 10;

    public function __construct()
    {
        $this->goods_style_config = pai_mall_load_config('paizhao_goods_style');
        $this->goods_type_config = pai_mall_load_config('paizhao_goods_type');
        $this->goods_location_config = pai_mall_load_config('paizhao_goods_location');
        $this->setServerId(101);
        $this->setDBName('mall_paizhao_db');
        $this->query('SET NAMES UTF8');
    }
    
    private function set_mall_consult_status_tbl()
    {
        $this->setTableName('mall_consult_status_tbl');
    }
    
    private function set_mall_consult_tbl()
    {
        $this->setTableName('mall_consult_tbl');
    }
    
    private function set_mall_goods_tbl()
    {
        $this->setTableName('mall_goods_tbl');
    }
    
    private function set_mall_advertises_img_tbl()
    {
        $this->setTableName('mall_advertises_img_tbl');
    }
    
    private function set_mall_recommend_photographers_tbl()
    {
        $this->setTableName('mall_recommend_photographers_tbl');
    }
    
    private function set_mall_hot_goods_tbl()
    {
        $this->setTableName('mall_hot_goods_tbl');
    }
    
    private function set_mall_goods_style_tbl()
    {
        $this->setTableName('mall_goods_style_tbl');
    }
    /**
     * 转换商品数据,并入库
     * @param array $goods_info
     */
    public function transform_goods_info($goods_info)
    {
        $goods_info['goods_data']['prices_list'] = unserialize($goods_info['goods_data']['prices_list']);
        foreach ($goods_info['goods_data']['service_detail'] as $k=>$v)
        {
            $goods_info['goods_data']['service_detail'][$k]['service_data'] = unserialize($v['service_data']);
        }
        $iconv_data = $this->array_iconv($goods_info['goods_data']);
        $data = $this->handle_data($iconv_data);
        if ($data)
        {
            $this->set_mall_goods_tbl();
            $this->insert($data['goods'], 'REPLACE');
            if ($data['style'])
            {
                $this->set_mall_goods_style_tbl();
                $goods_id = (int)$data['style']['goods_id'];
                foreach ($data['style']['style_ids'] as $v)
                {
                    $style_data = array(
                        'goods_id' => $goods_id,
                        'style_id' => (int)$v,
                        'style_name' => iconv('utf-8', 'gbk', $this->goods_style_config[$v]['name']),
                    );
                    $this->insert($style_data, 'REPLACE');
                    
                }
            }
            
            return true;
        }
        return false;
    }
    
    public function update_consult()
    {
        
    }
    
    /**
     * 进行数据具体转换
     * @param array $data
     * @return array|boolean
     */
    private function transform_data($data)
    {
        $result = array();
        if ( is_array($data) && array_key_exists(1, $data) )
        {
            foreach ($data as $k=>$v)
            {
                $v = $this->check_data($this->handle_data($v['goods_data']));
                if (!$v) continue;
                $result[] = $v;
            }
        }
        else if ( is_array($data) )
        {
            $data = $this->check_data($this->handle_data($data['goods_data']));
            $data ? $result[] = $data : $result = false;
        }
        return $result ? $result : false;
    }

    /**
     * 对数据进行处理,增加type_id和style_id等
     * @param array $data
     * @return array|boolean
     */
    private function handle_data($data)
    {
        $type_config = $this->goods_type_config;
        $style_config = $this->goods_style_config;
        //转换新老类型id
        $old_type_id = $data['att_type_id'];
        $new_type_id = 0;
        foreach ($type_config as $k=>$v)
        {
            if (in_array($old_type_id, $v['include']))
            {
                $new_type_id = $k;
                break;
            }
        }
        //转换新老风格id
        $new_style_ids = array();
        foreach ($data['detail'] as $v)
        {
            if ($v['type_id'] == 289)
            {
                foreach ($style_config as $m=>$n)
                {
                    if (in_array($v['data_type_attribute_id'], $n['include']))
                    {
                        $new_style_ids[] = $m;
                        break;
                    }
                }
            }
        }
        
        if (!$new_type_id)
        {
            return false;
        }
        $user_basic_type = $this->get_user_basic_type();
        $time = time();
        $goods_data = array(
            'goods_id' => $data['goods_id'],
            'seller_id' => $data['seller_id'],
            'photographers_type' => $user_basic_type[$data['user_id']] == 'person' ? 1 : 2,
            'type_id' => $new_type_id,
            'type_name' => $type_config[$new_type_id]['name'],
            'titles' => $data['titles'],
            'images' => $data['images'],
            'prices' => $data['prices'],
            'location_id' => $data['location_id'],
            'detail' => serialize($data),
            'create_time' => $time,
            'update_time' => $time,
        );
        $result['goods'] = $goods_data;
        $result['style'] = $new_style_ids ? array('goods_id'=>$data['goods_id'], 'style_ids'=>$new_style_ids) : false;
        return $result;
    }

    private function get_user_basic_type()
    {
        $user_basic_type = POCO::getCache('paizhao_user_basic_type');
        if (!$user_basic_type)
        {
            $sql = "SELECT `user_id`, `basic_type` FROM mall_db.mall_seller_tbl GROUP BY `user_id`";
            $info = $this->query($sql);
            foreach ($info as $k=>$v)
            {
                $user_basic_type[$v['user_id']] = $v['basic_type'];
            }
            POCO::setCache('paizhao_user_basic_type', $user_basic_type);
        }
        return $user_basic_type;
    }
    /**
     * 获取新的type_id或style_id
     * @param int $old_id
     * @param string $type
     * @return int|boolean
     */
    private function get_new_id($old_id, $type='type')
    {
        $data = $type == 'type' ? $this->goods_type_config : $this->goods_style_config;
        foreach ($data as $k=>$v)
        {
            if (in_array($old_id, $v['include'])) return $k;
        }
        return false;
    }

    /**
     * 校验goods字段信息
     * @param array $data
     * @return array|boolean
     */
    private function check_data($data)
    {
        if (!$data || (count($data) != $this->goods_fields_num) || !$data['goods_id'] || !$data['seller_id'] || !$data['style_id'] ||  
            !$data['photographers_type'] || !$data['titles'] || !$data['prices'] || !$data['location_id'] || !$data['type_id'] || !$data['detail'])
        {
            return false;
        }
        else
        {
            $time = time();
            return array(
                (int)$data['goods_id'],
                (int)$data['seller_id'],
                (int)$data['photographers_type'],
                (int)$data['type_id'],
                (int)$data['style_id'],
                "'{$data['titles']}'",
                "'{$data['images']}'",
                (float)$data['prices'],
                (int)$data['location_id'],
                "'{$data['detail']}'",
                $time,
                $time,
            );
        }
    }

    /**
     * 生成热门推荐商品
     */
    public function make_hot_goods()
    {
        $this->set_mall_goods_tbl();
        $hot_goods = $this->findAll('', 'LIMIT 0,20', 'consult_num DESC', '`goods_id`,`titles`');
        if ($hot_goods)
        {
            $values = array();
            $time = time();
            foreach ($hot_goods as $k=>$v)
            {
                $values[] = "({$v['goods_id']},'{$v['titles']}',{$time},{$time})";
            }
            $values = implode(',', $values);
            $this->set_mall_hot_goods_tbl();
            $sql = "INSERT INTO {$this->_db_name}.{$this->_tbl_name}(`goods_id`,`titles`,`create_time`,`update_time`) VALUES{$values}";
            $this->query($sql);
            return array('result'=>1,'message'=>'更新成功');
        }
        return array('result'=>-1, 'message'=>'没有热门商品');
    }
    
    public function edit_hot_goods()
    {
        
    }
    
    public function add_ad($data)
    {
        
    }

    public function edit_ad($edit_info)
    {
        
    }
    
    public function add_consult($data)
    {
        $data = array(
            'name' => $data['name'],
            'mobile' => $data['mobile'],
            'photographers' => $data['photographers']
        );
        $result = $this->insert($data);
        return $result ? array('result'=>1, 'message'=>'添加咨询成功') : array('result'=>-1, 'message'=>'添加失败');
    }
    
    public function edit_consult($edit_info)
    {
        
    }
    
    /**
     * 获取商品列表
     * @param string $where
     * @param string $limit
     * @param string $order
     * @param string $fields
     */
    public function get_goods_list($where = '', $limit = '0,40', $order = '`consult_num` DESC, `update_time` DESC', $fields = '`goods_id`,`titles`')
    {
        $this->set_mall_goods_tbl();
        return $this->findAll($where, $limit, $order, $fields);
    }
    
    /**
     * 获取商品详情
     * @param int $goods_id
     */
    public function get_goods_info($goods_id)
    {
        $where = 'goods_id=' . (int)$goods_id;
        $this->set_mall_goods_tbl();
        return $this->find($where);
    }
    
    private function array_iconv($data, $in_charset='utf-8,gbk', $out_charset='utf-8')
    {
        if(is_array($data))
        {
            foreach($data as $k => $v)
            {
                $data[$k] = $this->array_iconv($v);
            }
            return $data;
        }
        else
        {
            return mb_convert_encoding($data, $out_charset, $in_charset);
        }
    }
}